# ░█▀▄░█▀█░▀█▀░█▀▀░▀█▀░█░░░█▀▀░█▀▀
# ░█░█░█░█░░█░░█▀▀░░█░░█░░░█▀▀░▀▀█
# ░▀▀░░▀▀▀░░▀░░▀░░░▀▀▀░▀▀▀░▀▀▀░▀▀▀
# 
# FILE: ~/.zshrc

# Some basics {{{
# for sheldon as it is insanely stupid
export XDG_CONFIG_HOME=$HOME/.config
HISTFILE=~/.zsh_history
HISTSIZE=2000
SAVEHIST=1000000
setopt autocd extendedglob nomatch 
unsetopt beep
fpath+=$HOME/.zfunc


zstyle :compinstall filename '/home/axolotl/.zshrc'
autoload -Uz compinit && compinit
autoload -U promptinit && promptinit
# }}}

# $PATH {{{
# Check if $HOME/.local/bin is already part of the PATH variable
if [ ! $(echo $PATH | grep "$HOME/.local/bin") ] && [ -d ~/.local/bin ] ; then
  export PATH=$PATH:~/.local/bin
fi
if [ ! $(echo $PATH | grep "$HOME/.emacs.d/bin") ] && [ -d ~/.emacs.d/bin ] ; then
  export PATH=$PATH:~/.emacs.d/bin
fi
if [ ! $(echo $PATH | grep "$HOME/.cargo/bin") ] && [ -d ~/.cargo/bin ] ; then
  export PATH=$PATH:~/.cargo/bin
fi
if [ ! $(echo $PATH | grep "$HOME/.dotfiles/bin/bin") ] && [ -d ~/.dotfiles/bin/bin ] ; then
  export PATH=$PATH:~/.dotfiles/bin/bin
fi
# }}}

# Initializations {{{
# Init starship
eval "$(starship init zsh)"

# export ZSH
export ZSH="$HOME/.local/share/sheldon/repos/github.com/ohmyzsh/ohmyzsh"
# Init sheldon
eval "$(sheldon source)"
# source private stuff
if [ ! -f $HOME/.private_profile ]; then; echo "No private profile found"; else; source $HOME/.private_profile; fi;
# }}}

# Plugins Config {{{
# zsh-you-should-use
export YSU_MESSAGE_POSITION="before"
export YSU_MODE=ALL
export YSU_MESSAGE_FORMAT=$(tput bold)"$(tput setaf 1)You stoopid forgot that there is an $(tput setaf 3)%alias_type$(tput setaf 9) for $(tput setaf 3)%command$(tput setaf 9). It is $(tput setaf 3)%alias$(tput setaf 9)$(tput sgr0)"

# zsh auto ls functions
auto-ls-custom_function() {
  if [ ! -d .git ]; then
    exa --icons --group-directories-first --long --header
  else
    git status
    exa --icons --group-directories-first --long --all --git --header
  fi
}

AUTO_LS_COMMANDS=(custom_function)
# }}}

# Functions {{{

color () { # {{{
    # echo ""
    #black
    echo -e "\e[0;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 01 0;30m"
    #red
    echo -e "\e[0;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 02 0;31m"
    #green
    echo -e "\e[0;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 03 0;32m"
    #yellow
    echo -e "\e[0;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 04 0;33m"
    #blue
    echo -e "\e[0;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 05 0;34m"
    #purple
    echo -e "\e[0;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 06 0;35m"
    #cyan
    echo -e "\e[0;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 07 0;36m"
    #white
    echo -e "\e[0;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 08 0;37m"
    echo ""
    #black
    echo -e "\e[1;30m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 09 1;30m"
    #red
    echo -e "\e[1;31m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 10 1;31m"
    #green
    echo -e "\e[1;32m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 11 1;32m"
    #yellow
    echo -e "\e[1;33m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 12 1;33m"
    #blue
    echo -e "\e[1;34m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 13 1;34m"
    #purple
    echo -e "\e[1;35m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 14 1;35m"
    #cyan
    echo -e "\e[1;36m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 15 1;36m"
    #white
    echo -e "\e[1;37m ███ *** AaBbCs ---  ███ \\e[0m   ---> Color 16 1;37m"
    echo ""
    echo -e "\e[0;30m█████\\e[0m\e[0;31m█████\\e[0m\e[0;32m█████\\e[0m\e[0;33m█████\\e[0m\e[0;34m█████\\e[0m\e[0;35m█████\\e[0m\e[0;36m█████\\e[0m\e[0;37m█████\\e[0m"
    echo -e "\e[0m\e[1;30m█████\\e[0m\e[1;31m█████\\e[0m\e[1;32m█████\\e[0m\e[1;33m█████\\e[0m\e[1;34m█████\\e[0m\e[1;35m█████\\e[0m\e[1;36m█████\\e[0m\e[1;37m█████\\e[0m"
} # }}}

clr() {
    grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:-
}

getWinClass() {
    xprop | grep WM_CLASS
}

noice() {
  if command -v toilet &> /dev/null; then
    for arg in $@; do
      toilet -f pagga "$arg"
    done
  else
    echo Toilet not installed!
  fi
}

dots() {
  if command -v toilet &> /dev/null; then
    toilet -f pagga "Dotfiles"
    echo
    echo "File:"
    echo "By: @ExtinctAxolotl"
  fi
}

mackse() {
  mackup list | fzf

}

gogh () {
    bash -c  "$(curl -sLo- https://git.io/vQgMr)" 
}

docx2md() {
  if command -v pandoc &> /dev/null; then
    pandoc --from=docx --to=gfm $1 --output=$2
  else
    echo -e "Pandoc is not installed!\nPlease install it with your package manager! :D"
  fi
}

bomb() {
    bombadil link -p sway_$(cat ~/.bomb_theme)
}
# }}}

# Variables {{{
# Editors
export EDITOR=nvim
export VISUAL=nvim
export SUDO_EDITOR=$EDITOR

# the manpager
export PAGER="bat --theme=ansi"
# export MANPAGER="nvim -c MANPAGER -"
export MANPAGER="sh -c 'col -bx | bat -l man -p --theme=ansi'"

# FZF
if command -v fd &> /dev/null; then
    export FZF_DEFAULT_COMMAND="fd --hidden"
else
    echo Install fd for better and faster search
    export FZF_DEFAULT_COMMAND="find ."
fi
export FZF_DEFAULT_OPTS="--preview 'bat --color=always --theme=ansi --number {} '"
# export TERMINAL=kitty
# }}}

# Aliases {{{
# ls
alias ls="exa --icons --group-directories-first --long --git --header"
alias lT="exa --icons --group-directories-first --tree --git --header"
alias ll="exa --icons --group-directories-first --long --all --git --header"
alias la="exa --icons --group-directories-first --long --all --git --header"

# nvim
alias v="nvim"
alias vv="vim"

# mkdir cp etc
alias md="mkdir -p"
alias cp="cp -r"

# alias rm="echo 'Use something else!'"

# theF*ck
alias f="fuck"
# needed for thef*ck
eval $(thefuck --alias)

# python
alias py3="python3"

# cd
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# paru
alias pain="paru -S"
alias pase="paru -Ss"
alias painfo="paru -Si"
alias pare="paru -R"
alias parem="paru -Rns"
alias paina="paru -S --aur"
# caffeine-install
alias cafin="paru -S --sudoloop --noconfirm"
# cargo
alias cr="cargo"
alias crr="cargo run"
alias crb="cargo build"
alias crn="cargo new --vcs=git"
alias crnn="cargo new --vcs=none"
alias crnl="cargo new --lib"
alias cri="cargo init"

# xinput
alias disintkey="xinput disable AT\ Translated\ Set\ 2\ keyboard"
alias enintkey="xinput enable AT\ Translated\ Set\ 2\ keyboard"

# bat
alias bat="bat --theme=ansi"

# vscode
alias vsc="code --reuse-window"

# todoist
alias todoist='todoist --color --indent'

# task
alias t="task"

# lazygit
alias lzg="lazygit"

# }}}

# Startup {{{
# SSH Agent
# eval $(keychain --eval id_ed25519 -q)

# Random fetcher
[ -f $HOME/.dotfiles/bin/others/random_fetcher.sh ] && bash $HOME/.dotfiles/bin/others/random_fetcher.sh
# dircolors

# [ -f $HOME/.dircolors/dircolors ] && eval $(dircolors ~/.dircolors/dircolors)
# }}}

# Keyring {{{
if [ -n "$DESKTOP_SESSION" ] && command -v gnome-keyring-daemon &> /dev/null; then
    eval $(gnome-keyring-daemon --start)
    export SSH_AUTH_SOCK
fi
# }}}

# Completion {{{
#compdef _gh gh
# zsh completion for gh                                   -*- shell-script -*- {{{

__gh_debug()
{
    local file="$BASH_COMP_DEBUG_FILE"
    if [[ -n ${file} ]]; then
        echo "$*" >> "${file}"
    fi
}

_gh()
{
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local lastParam lastChar flagPrefix requestComp out directive compCount comp lastComp
    local -a completions

    __gh_debug "\n========= starting completion logic =========="
    __gh_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $CURRENT location, so we need
    # to truncate the command-line ($words) up to the $CURRENT location.
    # (We cannot use $CURSOR as its value does not work when a command is an alias.)
    words=("${=words[1,CURRENT]}")
    __gh_debug "Truncated words[*]: ${words[*]},"

    lastParam=${words[-1]}
    lastChar=${lastParam[-1]}
    __gh_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

    # For zsh, when completing a flag with an = (e.g., gh -n=<TAB>)
    # completions must be prefixed with the flag
    setopt local_options BASH_REMATCH
    if [[ "${lastParam}" =~ '-.*=' ]]; then
        # We are dealing with a flag with an =
        flagPrefix="-P ${BASH_REMATCH}"
    fi

    # Prepare the command to obtain completions
    requestComp="${words[1]} __complete ${words[2,-1]}"
    if [ "${lastChar}" = "" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go completion code.
        __gh_debug "Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __gh_debug "About to call: eval ${requestComp}"

    # Use eval to handle any environment variables and such
    out=$(eval ${requestComp} 2>/dev/null)
    __gh_debug "completion output: ${out}"

    # Extract the directive integer following a : from the last line
    local lastLine
    while IFS='\n' read -r line; do
        lastLine=${line}
    done < <(printf "%s\n" "${out[@]}")
    __gh_debug "last line: ${lastLine}"

    if [ "${lastLine[1]}" = : ]; then
        directive=${lastLine[2,-1]}
        # Remove the directive including the : and the newline
        local suffix
        (( suffix=${#lastLine}+2))
        out=${out[1,-$suffix]}
    else
        # There is no directive specified.  Leave $out as is.
        __gh_debug "No directive found.  Setting do default"
        directive=0
    fi

    __gh_debug "directive: ${directive}"
    __gh_debug "completions: ${out}"
    __gh_debug "flagPrefix: ${flagPrefix}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        __gh_debug "Completion received error. Ignoring completions."
        return
    fi

    compCount=0
    while IFS='\n' read -r comp; do
        if [ -n "$comp" ]; then
            # If requested, completions are returned with a description.
            # The description is preceded by a TAB character.
            # For zsh's _describe, we need to use a : instead of a TAB.
            # We first need to escape any : as part of the completion itself.
            comp=${comp//:/\\:}

            local tab=$(printf '\t')
            comp=${comp//$tab/:}

            ((compCount++))
            __gh_debug "Adding completion: ${comp}"
            completions+=${comp}
            lastComp=$comp
        fi
    done < <(printf "%s\n" "${out[@]}")

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local filteringCmd
        filteringCmd='_files'
        for filter in ${completions[@]}; do
            if [ ${filter[1]} != '*' ]; then
                # zsh requires a glob pattern to do file filtering
                filter="\*.$filter"
            fi
            filteringCmd+=" -g $filter"
        done
        filteringCmd+=" ${flagPrefix}"

        __gh_debug "File filtering command: $filteringCmd"
        _arguments '*:filename:'"$filteringCmd"
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subDir
        subdir="${completions[1]}"
        if [ -n "$subdir" ]; then
            __gh_debug "Listing directories in $subdir"
            pushd "${subdir}" >/dev/null 2>&1
        else
            __gh_debug "Listing directories in ."
        fi

        _arguments '*:dirname:_files -/'" ${flagPrefix}"
        if [ -n "$subdir" ]; then
            popd >/dev/null 2>&1
        fi
    elif [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ] && [ ${compCount} -eq 1 ]; then
        __gh_debug "Activating nospace."
        # We can use compadd here as there is no description when
        # there is only one completion.
        compadd -S '' "${lastComp}"
    elif [ ${compCount} -eq 0 ]; then
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            __gh_debug "deactivating file completion"
        else
            # Perform file completion
            __gh_debug "activating file completion"
            _arguments '*:filename:_files'" ${flagPrefix}"
        fi
    else
        _describe "completions" completions $(echo $flagPrefix)
    fi
}

# don't run the completion function when being source-ed or eval-ed
if [ "$funcstack[1]" = "_gh" ]; then
	_gh
fi
# }}}
#}}}

# Vim keybindings
bindkey -v
# vim:foldmethod=marker
